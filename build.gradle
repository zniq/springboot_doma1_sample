apply plugin: "war"
apply plugin: "spring-boot"
apply plugin: "eclipse"

buildscript {
  ext {
    springBootVersion = "1.3.5.RELEASE"
  }
  repositories {
    maven { url "http://repo.maven.apache.org/maven2" }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
  }
}


ext.defaultEncoding = "UTF-8"
sourceCompatibility = targetCompatibility = 1.7
tasks.withType(AbstractCompile) each {
  it.options.encoding = ext.defaultEncoding
}

ext {
  // loggers
  log4j2JdbcVersion = "1.16"
  
  domaVersion = "1.38.0"
  
  // other
  lombokVersion = "1.16.2"
  
  eclipseAptPrefsFile = '.settings/org.eclipse.jdt.apt.core.prefs'
  eclipseFactoryPathFile = '.factorypath'

}

// build setting for doma
def aptGeneratePath = 'build/apt_generated'
task mkDomaWorkDir {
    mustRunAfter 'clean'
    it << { mkdir(aptGeneratePath) }
}
processResources.destinationDir = compileJava.destinationDir
compileJava.dependsOn processResources, mkDomaWorkDir
compileJava.options.compilerArgs = ['-s', aptGeneratePath]


repositories {
  mavenCentral()
  maven { url "http://repo.maven.apache.org/maven2" }
  maven { url 'http://maven.seasar.org/maven2' }
}

eclipse {
  classpath {
    containers "org.springsource.ide.eclipse.gradle.classpathcontainer"
  }
  classpath.file.withXml {
    it.asNode().appendNode('classpathentry', [kind: 'src', path: '.apt_generated'])
  }
  jdt.file.withProperties { properties ->
    properties.put 'org.eclipse.jdt.core.compiler.processAnnotations', 'enabled'
  }
}

dependencies {

  // springboot
  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.springframework.boot:spring-boot-starter-jdbc'
  providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
  testCompile 'org.springframework.boot:spring-boot-starter-test'
      
  // data
  runtime 'com.h2database:h2'
  compile "org.seasar.doma:doma:${domaVersion}"
    
  // logger
  compile group: "org.bgee.log4jdbc-log4j2", name: "log4jdbc-log4j2-jdbc4.1", version: log4j2JdbcVersion
    
  // other
  compile group: 'javax.inject', name: 'javax.inject', version: '1'
  compile group: 'org.projectlombok', name: 'lombok', version:lombokVersion
    
}

eclipseJdt {
  doFirst {
    def factorypath = file('.factorypath')
    def writer = new FileWriter(factorypath)
    def xml = new groovy.xml.MarkupBuilder(writer)
    xml.setDoubleQuotes(true)
    xml.'factorypath'() {
      def domaJar = configurations.compile.find {
        it.name.startsWith('doma')
      }
      'factorypathentry'(kind: 'EXTJAR', id: domaJar, enabled: true, runInBatchMode: false)
      'factorypathentry'(kind: 'PLUGIN', id: 'org.eclipse.jst.ws.annotations.core', enabled: true, runInBatchMode: false)
    }
  }
}
eclipseJdt << {
  file(eclipseAptPrefsFile).write """\
    |eclipse.preferences.version=1
    |org.eclipse.jdt.apt.aptEnabled=true
    |org.eclipse.jdt.apt.genSrcDir=.apt_generated
    |org.eclipse.jdt.apt.reconcileEnabled=true
    |""".stripMargin()
}

cleanEclipse << {
  file(eclipseAptPrefsFile).delete()
  file(eclipseFactoryPathFile).delete()
}
